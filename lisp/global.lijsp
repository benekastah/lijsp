
(var (datum (require "../datum")))
(var (compiler (require "../javascript_compiler")))
(var (expander (require "../expander")))
(var (reader (require "../reader")))
(var (util (require "../util")))

(def root (@<?:> (@<===> (@<typeof> global) "undefined")
                 window
                 global))

(use-from datum
          list cons symbol apply
          each map filter reduce (reduceRight as reduce-r)
          (reduceLeft as reduce-l) reverse concat nth first second last
          init tail head join identity length flatten gensym

          ;; Operators
          Operator TernaryOperator VoidOperator ThisOperator VarOperator
          FunctionOperator ReturnOperator PropertyAccessOperator
          JavaScriptCode

          (isList as list?)
          (isPair as pair?))

;; This needs to be defined before any defsyntax calls
(def lisp-expander ((@<.> expander 'makeExpander)))
(def lisp_expander lisp-expander)

(use-from util
          (lispInspect as lisp-inspect))

(defsyntax inspect 'lisp-inspect)

(def (array)
  ((@<.> util 'slice) arguments))

(def (object)
  (reduce (lambda (o p)
            (do
              (@<=> (@<.> o (first p)) (second p))
              o)) (@<new> (Object)) arguments))

(def lisp-compiler ((@<.> compiler 'makeCompiler)
                    ()
                    (object (cons 'expander lisp-expander))))


(defsyntax (print $$stuff)
  (var (args (map (lambda (x) `(inspect ,x)) $$stuff)))
  `((@<.> console 'log) ,@args))

(def (printfn)
  (var (args (map (lambda (x) (inspect x)) arguments)))
  (apply (@<.> console 'log) args))

(def (nil? x)
  (@<==> x ()))

;; Set up read
(def (make-parser s)
  ((@<.> reader 'makeParser) s))

(def (read s)
  ((@<.> (make-parser s) 'parseAll)))

(def (macroexpand ast)
  ((@<.> lisp-compiler 'expander 'expand) ast))

;; Set up eval
(def (to-js ast)
  ((@<.> lisp-compiler 'compileAst) ast))
(def to_js to-js)

(def js-eval eval)
(defsyntax (eval $ast)
  `(@{eval} (to-js ,$ast)))

(def (lisp-eval ast)
  (@{eval} (to-js ast)))
(def lisp_eval lisp-eval)

(defsyntax (if $a $b $c) `(@<?:> ,$a ,$b ,$c))

(defsyntax (get $obj $$props) `(@<.> ,$obj ,@$$props))

(defsyntax (set $x $val)
  `(@<=> ,$x ,$val))

(defsyntax (set ($obj $$props) $val)
  `(set (get ,$obj ,@$$props) ,$val))

(defsyntax (set-def $x $val)
  `(set ,$x (set (exports ',$x ,$val))))

(def (rmap fn ls)
  (map (lambda (x)
    (if (list? x)
      (rmap fn x)
      (fn x))) ls))

(defsyntax (let $vars $$body)
  `((lambda ()
      (var ,@$vars)
      ,@$$body)))

(defsyntax (def-macro-fn $macro)
  `(def (,$macro)
     (eval (concat (list ',$macro) arguments))))

(@<try>
  (statements
    ;; Get logic functions
    (def-require ("./modules/logic.lijsp.js" as lisp/modules/logic))
    (use-from lisp/modules/logic
              < > <= >= not)

    ;; Get math functions
    (def-require ("./modules/math.lijsp.js" as lisp/modules/math))
    (use-from lisp/modules/math
              + - * / mod ** bitwise-and bitwise-or bitwise-xor
              bitwise-not bitwise-shift
              ))
  (@<catch> e
            (@<&&> (@<!> (@<===> (@<.> e 'code) "MODULE_NOT_FOUND"))
                   ((@<.> console 'error) e))))
