
(@<var> (datum (require "../datum")))
(@<var> (compiler (require "../javascript_compiler")))
(@<var> (expander (require "../expander")))
(@<var> (reader (require "../reader")))
(@<var> (util (require "../util")))

(def root (@<?:> (@<===> (@<typeof> global) "undefined")
                 window
                 global))

(use-from datum
          list cons symbol apply
          each map filter reduce (reduceRight as reduce-r)
          (reduceLeft as reduce-l) reverse concat nth first second last
          init tail head join identity length flatten gensym

          ;; Operators
          Operator TernaryOperator VoidOperator ThisOperator VarOperator
          FunctionOperator ReturnOperator PropertyAccessOperator

          (isList as list?)
          (isPair as pair?))

(use-from util
          inspect)

;; This needs to be defined before any defsyntax calls
(def lisp-expander ((@<.> expander 'makeExpander)))
(def lisp_expander lisp-expander)

(def (array)
  ((@<.> util 'slice) arguments))

(def (object)
  (reduce (lambda (o p)
            (do
              (@<=> (@<.> o (first p)) (second p))
              o)) (@<new> (Object)) arguments))

(def lisp-compiler ((@<.> compiler 'makeCompiler)
                    ()
                    (object (cons 'expander lisp-expander))))


(defsyntax (print $$stuff)
  (@<var> (args (map (lambda (x) `(inspect ,x)) $$stuff)))
  `((@<.> console 'log) ,@args))

(def (printfn)
  (@<var> (args (map (lambda (x) (inspect x)) arguments)))
  (apply (@<.> console 'log) args))

(defsyntax (+ $$rest)
  `(@<+> ,@$$rest))

(def (+ a b)
  (+ a b))

(defsyntax (- $$rest)
  `(@<-> ,@$$rest))

(def (- a b)
  (- a b))

(defsyntax (* $$rest)
  `(@<*> ,@$$rest))

(def (* a b)
  (* a b))

(defsyntax (/ $$rest)
  `(@</> ,@$$rest))

(def (/ a b)
  (/ a b))

(defsyntax (mod $$rest)
  `(@<%> ,@$$rest))

(def (mod a b)
  (mod a b))

(def ** (@<.> Math 'pow))

(defsyntax (< $$rest)
  `(@<<> ,@$$rest))

(def (< a b)
  (@<<> a b))

(def (> a b)
  (@<>> a b))

(def (<= a b)
  (@<<=> a b))

(def (>= a b)
  (@<>=> a b))

(defsyntax (or $$args)
  `(@<||> ,@$$args))

(defsyntax (and $$args)
  `(@<&&> ,@$$args))

(def (not x)
  (@<!> x))

;; Set up read
(def (make-parser s)
  ((@<.> reader 'makeParser) s))

(def (read s)
  ((@<.> (make-parser s) 'parseAll)))

(def (macroexpand ast)
  ((@<.> lisp-compiler 'expander 'expand) ast))

;; Set up eval
(def (to-js ast)
  ((@<.> lisp-compiler 'compileAst) ast))
(def to_js to-js)

(def (lisp-eval ast)
  (eval (to-js ast)))
(def lisp_eval lisp-eval)
(def js-eval eval)
(defsyntax eval 'lisp-eval)

(defsyntax (if $a $b $c) `(@<?:> ,$a ,$b ,$c))

(defsyntax (get $obj $$props) `(@<.> ,$obj ,@$$props))
; (defsyntax ('$sym $obj) `(get ,$obj ',$sym))

(defsyntax (set ($obj $$props) $val)
  `(@<=> (get ,$obj ,@$$props) ,$val))

(defsyntax (set $x $val)
  `(@<=> ,$x ,$val))

(def (rmap fn ls)
  (map (lambda (x)
    (if (list? x)
      (rmap fn x)
      (fn x))) ls))

(defsyntax (let $vars $$body)
  `((lambda ()
      (@<var> ,@$vars)
      ,@$$body)))
