
(import-all-from lisp/test)

(def (assert-fn x)
  (assert-eq "function" (@<typeof> x)))

(defsyntax (assert-math $answer $call)
  `(do
     (assert-nums-eq ,$answer ,$call)
     (assert-nums-eq ,$answer
                     (apply ,(first $call) (list ,@(tail $call))))))

(describe
  "Math operations"
  (it "should be able to add"
      (assert-fn +)
      (assert-math 5 (+ 3 1 1))
      (assert-math 4.6 (+ 2 2 0.6)))

  (it "should be able to subtract"
      (assert-fn -)
      (assert-math 10 (- 50 30 10))
      (assert-math 0.4 (- 1.4 1)))

  (it "should be able to negate a number"
      (assert-math -5 (- 5))
      (let ((n 0.6))
        (assert-math -0.6 (- n))))

  (it "should be able to multiply"
      (assert-fn *)
      (assert-math 9 (* 3 3))
      (assert-math 10.2 (* 5.1 2)))

  (it "should be able to divide"
      (assert-fn /)
      (assert-math 4.5 (/ 9 2))
      (assert-math 40.2 (/ 20.1 0.5 1)))

  (it "should be able do calculate modulus"
      (assert-fn mod)
      (assert-math 3 (mod 66 7))
      (assert-math 0 (mod 10 2))))
