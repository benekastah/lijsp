#!/usr/bin/env node --harmony

var ArgumentParser = require('argparse').ArgumentParser,
    pjson = require('../package.json'),
    path = require('path');

var argparser = new ArgumentParser({
  version: pjson.version,
  addHelp: true,
  description: 'lijsp base command'
});
argparser.addArgument(['--verbose'], {
  help: 'Print verbose debug information',
  action: 'storeTrue'
});

var subparsers = argparser.addSubparsers({
  title:'subcommands',
  dest:"subcommand_name"
});

var replParser = subparsers.addParser('repl', {
  addHelp: true
});
replParser.addArgument(['-l', '--historyLength'], {
  help: 'How many history entries to store',
  defaultValue: 200,
  type: Number
});
replParser.addArgument(['-p', '--historyPersist'], {
  help: 'Where to persist repl history',
  defaultValue: '.lijsp_repl_history.json'
});
replParser.addArgument(['-c', '--showCode'], {
  help: 'Whether or not to print the generated code rather than the ' +
    'eval\'d result',
  defaultValue: false,
  action: 'storeTrue'
});
replParser.addArgument(['-a', '--ast'], {
  help: 'Whether or not to print the ast rather than the eval\'d result',
  defaultValue: false,
  action: 'storeTrue'
});

var compileParser = subparsers.addParser('compile', {
  addHelp: true
});
compileParser.addArgument(['-f', '--files'], {
  help: 'Enumerate the files to compile',
  defaultValue: [],
  nargs: '*'
});
compileParser.addArgument(['-o', '--outfile'], {
  help: 'The path of the compiler output'
});
compileParser.addArgument(['-i', '--indentLevel'], {
  help: 'The indent level of the generated javascript code',
  defaultValue: 2
});

var args = argparser.parseArgs();
if (args.verbose) {
  console.log('Parsed args:');
  console.dir(args);
}

var execSubcommand = function (args) {
  var cmdModulePath = path.join('../commands/', args.subcommand_name);
  args.verbose && console.log('Requiring subcommand module:', cmdModulePath);
  var cmdModule = require(cmdModulePath);
  args.verbose && console.log('Calling subcommand module\'s `execute` function');
  cmdModule.execute(args);
};

execSubcommand(args);
